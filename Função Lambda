import os
import json
import logging
from datetime import datetime, timezone, timedelta

import boto3


def lambda_handler(event: dict, context: dict) -> dict:

  '''
  Recebe uma mensagens do Telegram via AWS API Gateway, verifica no
  seu conteúdo se foi produzida em um determinado grupo e a escreve,
  em seu formato original JSON, em um bucket do AWS S3.
  '''

  # vars de ambiente

  BUCKET = os.environ['AWS_S3_BUCKET'] # Consome a variável de ambiente com o nome do Bucket do AWS S3
  TELEGRAM_CHAT_ID = int(os.environ['TELEGRAM_CHAT_ID']) # Consome a variável de ambiente com o Id do grupo

  # vars lógicas

  tzinfo = timezone(offset=timedelta(hours=-3)) # Configura uma timezome para o fuso horário de Brasília(GMT-3)
  date = datetime.now(tzinfo).strftime('%Y-%m-%d')
  timestamp = datetime.now(tzinfo).strftime('%Y%m%d%H%M%S%f')

  filename = f'{timestamp}.json'

  # código principal

  client = boto3.client('s3')

  try:

    message = json.loads(event["body"]) # Para testar no AWS Lambda, você pode comentar essa linha e descomentar a de baixo
    # message = event

    if message == None or message == []:
      # Não foi enviada nenhuma mensagem no grupo
      return dict(statusCode="204") # Solicitação foi processada com sucesso, mas que não há dados a serem retornados

    else:
      chat_id = message["message"]["chat"]["id"]

      # Verifica se o código do chat é igual ao código do grupo que está na variável de ambiente
      if chat_id == TELEGRAM_CHAT_ID:

        with open(f"/tmp/{filename}", mode='w', encoding='utf8') as fp:
          json.dump(message, fp)

        client.upload_file(f'/tmp/{filename}', BUCKET, f'telegram/context_date={date}/{filename}')

  except Exception as exc:
      # Caso tenha dado errado, retorna o status code 500
      logging.error(msg=exc)
      return dict(statusCode="500")

  else:
      # Caso tenha dado certo, retorna o status code 200
      return dict(statusCode="200")
